<script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        let tg = window.Telegram.WebApp;
        tg.expand();
        tg.ready();

        // –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let transactions = [];
        let accounts = [];
        let isLoading = false;

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏
        const expenseCategories = {
            'food': 'üçï –ï–¥–∞',
            'transport': 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 
            'shopping': 'üõí –ü–æ–∫—É–ø–∫–∏',
            'entertainment': 'üé¨ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'health': 'üíä –ó–¥–æ—Ä–æ–≤—å–µ',
            'bills': 'üìÑ –°—á–µ—Ç–∞',
            'education': 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            'sport': '‚öΩ –°–ø–æ—Ä—Ç',
            'beauty': 'üíÑ –ö—Ä–∞—Å–æ—Ç–∞',
            'home': 'üè† –î–æ–º',
            'other-expense': 'üì¶ –ü—Ä–æ—á–µ–µ'
        };

        const incomeCategories = {
            'salary': 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞',
            'freelance': 'üíª –§—Ä–∏–ª–∞–Ω—Å–µ',
            'business': 'üè¢ –ë–∏–∑–Ω–µ—Å',
            'investment': 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
            'gift': 'üéÅ –ü–æ–¥–∞—Ä–æ–∫',
            'bonus': 'üéØ –ü—Ä–µ–º–∏—è',
            'sale': 'üí∏ –ü—Ä–æ–¥–∞–∂–∞',
            'refund': '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç',
            'other-income': 'üíµ –ü—Ä–æ—á–µ–µ'
        };

        const allCategories = {...expenseCategories, ...incomeCategories};

        // Telegram Cloud Storage —Ñ—É–Ω–∫—Ü–∏–∏
        function saveToCloud() {
            if (isLoading) return;
            
            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const transactionsData = JSON.stringify(transactions);
                const transactionChunks = [];
                const chunkSize = 900;
                
                for (let i = 0; i < transactionsData.length; i += chunkSize) {
                    transactionChunks.push(transactionsData.slice(i, i + chunkSize));
                }
                
                tg.CloudStorage.setItem('transactions_chunks_count', transactionChunks.length.toString());
                transactionChunks.forEach((chunk, index) => {
                    tg.CloudStorage.setItem(`transactions_${index}`, chunk);
                });

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç–∞
                const accountsData = JSON.stringify(accounts);
                tg.CloudStorage.setItem('accounts', accountsData);
                
                console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Telegram Cloud');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Cloud:', error);
                // Fallback –Ω–∞ localStorage
                localStorage.setItem('transactions', JSON.stringify(transactions));
                localStorage.setItem('accounts', JSON.stringify(accounts));
            }
        }

        function loadFromCloud() {
            return new Promise((resolve) => {
                if (!tg.CloudStorage) {
                    // Fallback –Ω–∞ localStorage
                    const localTransactions = localStorage.getItem('transactions');
                    const localAccounts = localStorage.getItem('accounts');
                    transactions = JSON.parse(localTransactions || '[]');
                    accounts = JSON.parse(localAccounts || '[]');
                    initializeDefaultAccounts();
                    resolve();
                    return;
                }

                isLoading = true;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tg.CloudStorage.getItem('transactions_chunks_count', (error, chunksCount) => {
                    if (error || !chunksCount) {
                        transactions = JSON.parse(localStorage.getItem('transactions') || '[]');
                    } else {
                        const count = parseInt(chunksCount);
                        let loadedChunks = [];
                        let loadedCount = 0;

                        for (let i = 0; i < count; i++) {
                            tg.CloudStorage.getItem(`transactions_${i}`, (error, chunk) => {
                                if (!error && chunk) {
                                    loadedChunks[i] = chunk;
                                }
                                loadedCount++;
                                
                                if (loadedCount === count) {
                                    try {
                                        const fullData = loadedChunks.join('');
                                        transactions = JSON.parse(fullData || '[]');
                                    } catch (parseError) {
                                        transactions = [];
                                    }
                                    
                                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞
                                    loadAccountsFromCloud(resolve);
                                }
                            });
                        }
                    }
                    
                    if (!chunksCount) {
                        loadAccountsFromCloud(resolve);
                    }
                });
            });
        }

        function loadAccountsFromCloud(callback) {
            tg.CloudStorage.getItem('accounts', (error, accountsData) => {
                if (!error && accountsData) {
                    try {
                        accounts = JSON.parse(accountsData);
                    } catch (parseError) {
                        accounts = [];
                    }
                } else {
                    accounts = JSON.parse(localStorage.getItem('accounts') || '[]');
                }
                
                initializeDefaultAccounts();
                isLoading = false;
                updateAllBalances();
                callback();
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        function initializeDefaultAccounts() {
            if (accounts.length === 0) {
                accounts = [
                    {
                        id: 'cash',
                        name: '–ù–∞–ª–∏—á–Ω—ã–µ',
                        icon: 'üíµ',
                        balance: 0
                    },
                    {
                        id: 'card',
                        name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 
                        icon: 'üí≥',
                        balance: 0
                    }
                ];
                saveData();
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        function saveData() {
            localStorage.setItem('transactions', JSON.stringify(transactions));
            localStorage.setItem('accounts', JSON.stringify(accounts));
            saveToCloud();
        }

        // –í–µ–ª–∫–æ–º —ç–∫—Ä–∞–Ω
        function startApp() {
            document.getElementById('welcome-screen').style.display = 'none';
            document.getElementById('main-app').style.display = 'block';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –≤–µ–ª–∫–æ–º –ø–æ–∫–∞–∑–∞–ª–∏
            localStorage.setItem('welcome_shown', 'true');
            
            if (tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('medium');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ–ª–∫–æ–º
        function checkWelcome() {
            const welcomeShown = localStorage.getItem('welcome_shown');
            if (welcomeShown) {
                document.getElementById('welcome-screen').style.display = 'none';
                document.getElementById('main-app').style.display = 'block';
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        function updateCategories() {
            const type = document.getElementById('type').value;
            const categoryGroup = document.getElementById('category-group');
            const fromAccountGroup = document.getElementById('from-account-group');
            const toAccountGroup = document.getElementById('to-account-group');
            const accountGroup = document.getElementById('account-group');
            const categorySelect = document.getElementById('category');
            
            if (type === 'transfer') {
                categoryGroup.classList.add('hidden');
                fromAccountGroup.classList.remove('hidden');
                toAccountGroup.classList.remove('hidden');
                accountGroup.classList.add('hidden');
                updateAccountSelects();
            } else {
                categoryGroup.classList.remove('hidden');
                fromAccountGroup.classList.add('hidden');
                toAccountGroup.classList.add('hidden');
                accountGroup.classList.remove('hidden');
                
                categorySelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>';
                const categories = type === 'expense' ? expenseCategories : incomeCategories;
                
                Object.entries(categories).forEach(([value, label]) => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = label;
                    categorySelect.appendChild(option);
                });
            }
            
            updateAccountSelect();
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å—á–µ—Ç–æ–≤
        function updateAccountSelect() {
            const accountSelect = document.getElementById('account');
            accountSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç</option>';
            
            accounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.id;
                option.textContent = `${account.icon} ${account.name}`;
                accountSelect.appendChild(option);
            });
        }

        function updateAccountSelects() {
            const fromSelect = document.getElementById('from-account');
            const toSelect = document.getElementById('to-account');
            
            [fromSelect, toSelect].forEach(select => {
                select.innerHTML = '';
                accounts.forEach(account => {
                    const option = document.createElement('option');
                    option.value = account.id;
                    option.textContent = `${account.icon} ${account.name}`;
                    select.appendChild(option);
                });
            });
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–æ–≤
        function showTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.add('hidden');
            });
            
            document.querySelectorAll('.nav-item').forEach(nav => {
                nav.classList.remove('active');
            });
            
            document.getElementById(tabName + '-tab').classList.remove('hidden');
            event.target.closest('.nav-item').classList.add('active');
            
            if (tabName === 'history') {
                updateFilters();
                applyFilters();
            } else if (tabName === 'stats') {
                displayStats();
            } else if (tabName === 'accounts') {
                displayAccounts();
            }

            if (tg.HapticFeedback) {
                tg.HapticFeedback.impactOccurred('light');
            }
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        function addTransaction() {
            const type = document.getElementById('type').value;
            const amount = parseFloat(document.getElementById('amount').value);
            const description = document.getElementById('description').value;

            if (!amount || amount <= 0) {
                if (tg.showAlert) {
                    tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
                } else {
                    alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
                }
                return;
            }

            if (type === 'transfer') {
                const fromAccountId = document.getElementById('from-account').value;
                const toAccountId = document.getElementById('to-account').value;
                
                if (fromAccountId === toAccountId) {
                    if (tg.showAlert) {
                        tg.showAlert('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á—ë—Ç');
                    } else {
                        alert('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á—ë—Ç');
                    }
                    return;
                }

                const fromAccount = accounts.find(a => a.id === fromAccountId);
                const toAccount = accounts.find(a => a.id === toAccountId);

                if (fromAccount.balance < amount) {
                    if (tg.showAlert) {
                        tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ');
                    } else {
                        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ');
                    }
                    return;
                }

                const transaction = {
                    id: Date.now(),
                    type: 'transfer',
                    amount: amount,
                    fromAccount: fromAccountId,
                    toAccount: toAccountId,
                    description: description || `–ü–µ—Ä–µ–≤–æ–¥ ${fromAccount.name} ‚Üí ${toAccount.name}`,
                    date: new Date().toISOString()
                };

                transactions.unshift(transaction);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Å—á–µ—Ç–æ–≤
                fromAccount.balance -= amount;
                toAccount.balance += amount;
            } else {
                const category = document.getElementById('category').value;
                const accountId = document.getElementById('account').value;
                
                if (!category) {
                    if (tg.showAlert) {
                        tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                    } else {
                        alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                    }
                    return;
                }
                
                if (!accountId) {
                    if (tg.showAlert) {
                        tg.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç');
                    } else {
                        alert('–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç');
                    }
                    return;
                }
                
                const account = accounts.find(a => a.id === accountId);

                const transaction = {
                    id: Date.now(),
                    type: type,
                    amount: amount,
                    category: category,
                    account: accountId,
                    description: description,
                    date: new Date().toISOString()
                };

                transactions.unshift(transaction);

                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞
                if (type === 'income') {
                    account.balance += amount;
                } else {
                    account.balance -= amount;
                }
            }

            saveData();
            updateAllBalances();
            clearForm();
            showSyncStatus();

            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }

            if (tg.showAlert) {
                tg.showAlert('–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        function clearForm() {
            document.getElementById('amount').value = '';
            document.getElementById('description').value = '';
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤
        function updateAllBalances() {
            // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
            const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);
            const balanceElement = document.getElementById('total-balance');
            balanceElement.textContent = formatCurrency(totalBalance);
            
            balanceElement.className = 'total-balance';
            if (totalBalance > 0) {
                balanceElement.classList.add('positive');
            } else if (totalBalance < 0) {
                balanceElement.classList.add('negative');
            }

            // –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—á–µ—Ç–∞–º
            const accountsSummary = document.getElementById('accounts-summary');
            accountsSummary.innerHTML = accounts.map(account => 
                `<div class="account-chip">${account.icon} ${formatCurrency(account.balance)}</div>`
            ).join('');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        function updateFilters() {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            const categoryFilter = document.getElementById('category-filter');
            categoryFilter.innerHTML = '<option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
            
            const usedCategories = [...new Set(transactions.filter(t => t.category).map(t => t.category))];
            usedCategories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = allCategories[category] || category;
                categoryFilter.appendChild(option);
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—á–µ—Ç–æ–≤
            const accountFilter = document.getElementById('account-filter');
            accountFilter.innerHTML = '<option value="all">–í—Å–µ —Å—á–µ—Ç–∞</option>';
            
            accounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.id;
                option.textContent = `${account.icon} ${account.name}`;
                accountFilter.appendChild(option);
            });
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        function applyFilters() {
            const periodFilter = document.getElementById('period-filter').value;
            const categoryFilter = document.getElementById('category-filter').value;
            const typeFilter = document.getElementById('type-filter').value;
            const accountFilter = document.getElementById('account-filter').value;

            let filteredTransactions = [...transactions];

            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
            if (periodFilter !== 'all') {
                const now = new Date();
                let startDate = new Date();
                
                switch (periodFilter) {
                    case 'today':
                        startDate.setHours(0, 0, 0, 0);
                        break;
                    case 'week':
                        startDate.setDate(now.getDate() - 7);
                        break;
                    case 'month':
                        startDate.setMonth(now.getMonth() - 1);
                        break;
                    case 'quarter':
                        startDate.setMonth(now.getMonth() - 3);
                        break;
                }
                
                filteredTransactions = filteredTransactions.filter(t => 
                    new Date(t.date) >= startDate
                );
            }

            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            if (categoryFilter !== 'all') {
                filteredTransactions = filteredTransactions.filter(t => t.category === categoryFilter);
            }
            
            if (typeFilter !== 'all') {
                filteredTransactions = filteredTransactions.filter(t => t.type === typeFilter);
            }
            
            if (accountFilter !== 'all') {
                filteredTransactions = filteredTransactions.filter(t => 
                    t.account === accountFilter || t.fromAccount === accountFilter || t.toAccount === accountFilter
                );
            }

            displayFilteredTransactions(filteredTransactions);
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        function displayFilteredTransactions(filteredTransactions) {
            const listElement = document.getElementById('transaction-list');
            
            if (filteredTransactions.length === 0) {
                listElement.innerHTML = '<div class="empty-state"><p>–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p></div>';
                return;
            }

            const transactionsHTML = filteredTransactions.map(transaction => {
                const date = new Date(transaction.date).toLocaleDateString('ru-RU');
                let categoryName = '';
                let accountInfo = '';

                if (transaction.type === 'transfer') {
                    const fromAccount = accounts.find(a => a.id === transaction.fromAccount);
                    const toAccount = accounts.find(a => a.id === transaction.toAccount);
                    categoryName = `${fromAccount?.icon} ‚Üí ${toAccount?.icon} –ü–µ—Ä–µ–≤–æ–¥`;
                } else {
                    categoryName = allCategories[transaction.category] || transaction.category;
                    const account = accounts.find(a => a.id === transaction.account);
                    accountInfo = `<div class="transaction-account">${account?.icon} ${account?.name}</div>`;
                }
                
                return `
                    <div class="transaction-item">
                        <div class="transaction-info">
                            <div class="transaction-category">${categoryName}</div>
                            <div class="transaction-date">${date}</div>
                            ${accountInfo}
                            ${transaction.description ? `<div style="font-size: 12px; color: var(--tg-theme-hint-color, #999);">${transaction.description}</div>` : ''}
                        </div>
                        <div class="transaction-amount ${transaction.type}">
                            ${transaction.type === 'income' ? '+' : (transaction.type === 'transfer' ? '' : '-')}${formatCurrency(transaction.amount)}
                        </div>
                        <button class="delete-btn" onclick="deleteTransaction(${transaction.id})">üóëÔ∏è</button>
                    </div>
                `;
            }).join('');

            listElement.innerHTML = transactionsHTML;
        }

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        function clearFilters() {
            document.getElementById('period-filter').value = 'all';
            document.getElementById('category-filter').value = 'all';
            document.getElementById('type-filter').value = 'all';
            document.getElementById('account-filter').value = 'all';
            applyFilters();
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        function deleteTransaction(id) {
            if (tg.showConfirm) {
                tg.showConfirm('–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?', (confirmed) => {
                    if (confirmed) {
                        const transaction = transactions.find(t => t.id === id);
                        
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö
                        if (transaction.type === 'transfer') {
                            const fromAccount = accounts.find(a => a.id === transaction.fromAccount);
                            const toAccount = accounts.find(a => a.id === transaction.toAccount);
                            fromAccount.balance += transaction.amount;
                            toAccount.balance -= transaction.amount;
                        } else {
                            const account = accounts.find(a => a.id === transaction.account);
                            if (transaction.type === 'income') {
                                account.balance -= transaction.amount;
                            } else {
                                account.balance += transaction.amount;
                            }
                        }

                        transactions = transactions.filter(t => t.id !== id);
                        saveData();
                        updateAllBalances();
                        applyFilters();
                        showSyncStatus();
                        
                        if (tg.HapticFeedback) {
                            tg.HapticFeedback.notificationOccurred('success');
                        }
                    }
                });
            } else {
                if (confirm('–£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?')) {
                    const transaction = transactions.find(t => t.id === id);
                    
                    if (transaction.type === 'transfer') {
                        const fromAccount = accounts.find(a => a.id === transaction.fromAccount);
                        const toAccount = accounts.find(a => a.id === transaction.toAccount);
                        fromAccount.balance += transaction.amount;
                        toAccount.balance -= transaction.amount;
                    } else {
                        const account = accounts.find(a => a.id === transaction.account);
                        if (transaction.type === 'income') {
                            account.balance -= transaction.amount;
                        } else {
                            account.balance += transaction.amount;
                        }
                    }

                    transactions = transactions.filter(t => t.id !== id);
                    saveData();
                    updateAllBalances();
                    applyFilters();
                    showSyncStatus();
                }
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        function displayAccounts() {
            const accountsGrid = document.getElementById('accounts-grid');
            
            const accountsHTML = accounts.map(account => `
                <div class="account-card">
                    <div class="account-header">
                        <div>
                            <div class="account-name">${account.name}</div>
                        </div>
                        <div class="account-icon">${account.icon}</div>
                    </div>
                    <div class="account-balance ${account.balance >= 0 ? 'positive' : 'negative'}">
                        ${formatCurrency(account.balance)}
                    </div>
                    ${account.id !== 'cash' && account.id !== 'card' ? 
                        `<button class="btn danger" style="margin-top: 12px;" onclick="deleteAccount('${account.id}')">–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç</button>` : 
                        ''
                    }
                </div>
            `).join('');

            accountsGrid.innerHTML = accountsHTML;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç–∞
        function addAccount() {
            const name = document.getElementById('new-account-name').value.trim();
            const icon = document.getElementById('new-account-icon').value;
            const balance = parseFloat(document.getElementById('new-account-balance').value) || 0;

            if (!name) {
                if (tg.showAlert) {
                    tg.showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞');
                } else {
                    alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞');
                }
                return;
            }

            const newAccount = {
                id: 'account_' + Date.now(),
                name: name,
                icon: icon,
                balance: balance
            };

            accounts.push(newAccount);
            
            // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º, —Å–æ–∑–¥–∞—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            if (balance !== 0) {
                const transaction = {
                    id: Date.now(),
                    type: balance > 0 ? 'income' : 'expense',
                    amount: Math.abs(balance),
                    category: balance > 0 ? 'other-income' : 'other-expense',
                    account: newAccount.id,
                    description: `–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ "${name}"`,
                    date: new Date().toISOString()
                };
                transactions.unshift(transaction);
            }

            saveData();
            updateAllBalances();
            displayAccounts();
            updateAccountSelect();
            showSyncStatus();

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('new-account-name').value = '';
            document.getElementById('new-account-balance').value = '';

            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }

            if (tg.showAlert) {
                tg.showAlert('–°—á—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
            }
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
        function deleteAccount(accountId) {
            const account = accounts.find(a => a.id === accountId);
            
            if (tg.showConfirm) {
                tg.showConfirm(`–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç "${account.name}"? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`, (confirmed) => {
                    if (confirmed) {
                        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—á—ë—Ç–æ–º
                        transactions = transactions.filter(t => 
                            t.account !== accountId && 
                            t.fromAccount !== accountId && 
                            t.toAccount !== accountId
                        );
                        
                        // –£–¥–∞–ª—è–µ–º —Å—á—ë—Ç
                        accounts = accounts.filter(a => a.id !== accountId);
                        
                        saveData();
                        updateAllBalances();
                        displayAccounts();
                        updateAccountSelect();
                        showSyncStatus();
                        
                        if (tg.HapticFeedback) {
                            tg.HapticFeedback.notificationOccurred('success');
                        }
                    }
                });
            } else {
                if (confirm(`–£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç "${account.name}"? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`)) {
                    transactions = transactions.filter(t => 
                        t.account !== accountId && 
                        t.fromAccount !== accountId && 
                        t.toAccount !== accountId
                    );
                    
                    accounts = accounts.filter(a => a.id !== accountId);
                    
                    saveData();
                    updateAllBalances();
                    displayAccounts();
                    updateAccountSelect();
                    showSyncStatus();
                }
            }
        }

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        function displayStats() {
            const income = transactions
                .filter(t => t.type === 'income')
                .reduce((sum, t) => sum + t.amount, 0);
                
            const expenses = transactions
                .filter(t => t.type === 'expense')
                .reduce((sum, t) => sum + t.amount, 0);

            document.getElementById('total-income').textContent = formatCurrency(income);
            document.getElementById('total-expenses').textContent = formatCurrency(expenses);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤
            const expensesByCategory = {};
            transactions
                .filter(t => t.type === 'expense')
                .forEach(t => {
                    expensesByCategory[t.category] = (expensesByCategory[t.category] || 0) + t.amount;
                });

            const expenseHTML = Object.entries(expensesByCategory)
                .sort(([,a], [,b]) => b - a)
                .map(([category, amount]) => `
                    <div class="category-item">
                        <span>${allCategories[category] || category}</span>
                        <span>${formatCurrency(amount)}</span>
                    </div>
                `).join('');

            document.getElementById('expense-breakdown').innerHTML = 
                expenseHTML || '<div class="empty-state">–†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–æ—Ö–æ–¥–æ–≤
            const incomesByCategory = {};
            transactions
                .filter(t => t.type === 'income')
                .forEach(t => {
                    incomesByCategory[t.category] = (incomesByCategory[t.category] || 0) + t.amount;
                });

            const incomeHTML = Object.entries(incomesByCategory)
                .sort(([,a], [,b]) => b - a)
                .map(([category, amount]) => `
                    <div class="category-item">
                        <span>${allCategories[category] || category}</span>
                        <span style="color: #4CAF50;">${formatCurrency(amount)}</span>
                    </div>
                `).join('');

            document.getElementById('income-breakdown').innerHTML = 
                incomeHTML || '<div class="empty-state">–î–æ—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>';

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º
            const accountsHTML = accounts.map(account => `
                <div class="category-item">
                    <span>${account.icon} ${account.name}</span>
                    <span style="color: ${account.balance >= 0 ? '#4CAF50' : '#f44336'};">${formatCurrency(account.balance)}</span>
                </div>
            `).join('');

            document.getElementById('accounts-breakdown').innerHTML = accountsHTML;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        function showSyncStatus() {
            const status = document.getElementById('sync-status');
            status.classList.add('show');
            setTimeout(() => {
                status.classList.remove('show');
            }, 2000);
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        function formatCurrency(amount) {
            return new Intl.NumberFormat('ru-RU').format(amount) + ' ‚ÇΩ';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.addEventListener('DOMContentLoaded', function() {
            const filterElements = [
                'period-filter', 'category-filter', 'type-filter', 'account-filter'
            ];
            
            filterElements.forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('change', applyFilters);
                }
            });
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        async function init() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ–ª–∫–æ–º
            checkWelcome();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (document.getElementById('total-balance')) {
                document.getElementById('total-balance').textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
            await loadFromCloud();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            updateAllBalances();
            updateCategories();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º—ã
            document.documentElement.style.setProperty('--tg-color-scheme', tg.colorScheme);
            
            console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        }

        // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        init();
    </script>
